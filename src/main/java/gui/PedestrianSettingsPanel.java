package main.java.gui;

import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatter;
import main.java.pedestrians.AbstractPedestrian;
import main.java.pedestrians.IntelligentPedestrian;

/**
 * On this panel, the user can change the settings for new pedestrians
 * @author Pascal Andermatt, Jan Huber
 */
public class PedestrianSettingsPanel extends javax.swing.JPanel implements ChangeListener {

    /**
     * Creates a new PedestrianSettingsPanel
     */
    public PedestrianSettingsPanel() {
        initComponents();

        //This class should be informed if a value changes
        radiusSlider.addChangeListener(this);
        speedSlider.addChangeListener(this);
        spaceSlider.addChangeListener(this);

        //This class should be informed if the value of the brush-size-spinner changes
        JComponent comp = brushSizeSpinner.getEditor();
        JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);
        brushSizeSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                //this method gets called if the value of the spinner changes
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        title = new javax.swing.JLabel();
        radiusLabel = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        speedSlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        spaceLabel = new javax.swing.JLabel();
        spaceSlider = new javax.swing.JSlider();
        brushsizeLabel = new javax.swing.JLabel();
        brushSizeSpinner = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        title.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        title.setText("Add Pedestrian");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        add(title, gridBagConstraints);

        radiusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        radiusLabel.setText("Radius: 13px");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 0);
        add(radiusLabel, gridBagConstraints);

        radiusSlider.setMaximum(60);
        radiusSlider.setMinimum(2);
        radiusSlider.setValue(13);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 15);
        add(radiusSlider, gridBagConstraints);

        speedSlider.setValue(100);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 15);
        add(speedSlider, gridBagConstraints);

        speedLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        speedLabel.setText("Speed: 100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 0);
        add(speedLabel, gridBagConstraints);

        spaceLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        spaceLabel.setText("Prefered Space: 10px");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 0);
        add(spaceLabel, gridBagConstraints);

        spaceSlider.setValue(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 15);
        add(spaceSlider, gridBagConstraints);

        brushsizeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        brushsizeLabel.setText("Brushsize:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 0);
        add(brushsizeLabel, gridBagConstraints);

        brushSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 26;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 15, 15);
        add(brushSizeSpinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner brushSizeSpinner;
    private javax.swing.JLabel brushsizeLabel;
    private javax.swing.JLabel radiusLabel;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JLabel spaceLabel;
    private javax.swing.JSlider spaceSlider;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        //update all the lables
        radiusLabel.setText("Radius: " + radiusSlider.getValue() + "px");
        speedLabel.setText("Speed: " + speedSlider.getValue() + "");
        spaceLabel.setText("Preferred space: " + spaceSlider.getValue() + "px");
    }

    /**
     * Creates a new pedestrian with the current settings
     *
     * @return the created pedestrian
     */
    public IntelligentPedestrian getPedestrian() {
        //create pedestrian
        IntelligentPedestrian toAdd = new IntelligentPedestrian();
        //update settings
        toAdd.setRadius(radiusSlider.getValue());
        toAdd.setPreferredSpace(spaceSlider.getValue());
        toAdd.setSpeed(speedSlider.getValue() / (100 / AbstractPedestrian.SQUARE_ROOT_OF_TWO));

        return toAdd;
    }

    /**
     * The current brush-size tells how many pedestrians should be added at the
     * same time. For examle if the brushSize is 2, 4 Pedestrians are added
     * (2*2=4)
     *
     * @return the amount of pedestrians to draw
     */
    public int getPedestrianBrushSize() {
        return (int) brushSizeSpinner.getValue();
    }
}
